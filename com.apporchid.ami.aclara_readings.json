{"paragraphs":[{"title":"Load Hourly Read Interval Type - Load is since 01/July/2018","text":"spark.catalog.dropTempView(\"acl_readings\")\r\n\r\nspark.sql(\"set slotBeginDate='2017-07-01 00:00:00'\")\r\n\r\nval aclaraHourlyReadings = \r\nspark\r\n    .sql(\"\"\"select distinct meter_id, transponder_id, transponder_port, cast(customer_id AS String) as functionallocation,\r\n  reading_value, unit_of_measure, reading_datetime, timezone, battery_voltage,\r\n   round(reading_value - lag(reading_value, 1) OVER (partition by  meter_id ORDER BY reading_datetime),2) consumption,\r\n   unix_timestamp(reading_datetime)- unix_timestamp(lag(reading_datetime, 1) OVER (partition by  meter_id ORDER BY reading_datetime)) read_interval,\r\n  ingest_watermark from awexternal.aclara_readings\r\n--where reading_datetime > unix_timestamp()-48*60*60\r\nwhere reading_datetime > ${slotBeginDate} \"\"\")\r\n    .toDF()\r\n    \r\n    \r\naclaraHourlyReadings.registerTempTable(\"acl_readings\")\r\n\r\n\r\nval aclaraReadingsv2 = \r\nspark\r\n    .sql(\"\"\"\r\nSelect distinct  \r\n       acl_readings.meter_id as headend_meter_id,\r\n       acl_readings.functionallocation,\r\n       acl_readings.reading_datetime,\r\n       acl_readings.timezone,\r\n       acl_readings.reading_value,\r\n       acl_readings.unit_of_measure,\r\n       acl_readings.consumption,\r\n       acl_readings.read_interval,\r\n       imd.equipmentnumber,\r\n       imd.installation,\r\n       imd.register,\r\n       imd.logicalregisternumber,\r\n       cmd.businesspartnernumber,\r\n       cmd.contractaccount,\r\n       cmd.contract,\r\n       cmd.district\r\nfrom acl_readings\r\nInner Join awinternal.locationmasterdata lmd on acl_readings.functionallocation = lmd.functionallocation\r\ninner join awinternal.installedmeterdetails imd on imd.devicelocation = lmd.functionallocation\r\n       and current_date between imd.devicevaliditystartdate and imd.devicevalidityenddate\r\ninner join cloudseer.meter_details cmd on  cmd.equipmentnumber =imd.equipmentnumber\r\n      and current_date between cmd.devicevaliditystartdate and cmd.devicevalidityenddate\r\n      and current_date between cmd.moveindate and cmd.moveoutdate\r\n      and imd.register = cmd.register\r\n      and district in ('CA0520','CA0560')\r\norder by headend_meter_id, reading_datetime , imd.register\r\n\r\n\"\"\").toDF()\r\n\r\naclaraReadingsv2.count\r\n// aclaraReadingsv2.show","dateUpdated":"2018-08-28T06:02:28-0400","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"aclaraHourlyReadings: org.apache.spark.sql.DataFrame = [meter_id: string, transponder_id: string ... 10 more fields]\nwarning: there was one deprecation warning; re-run with -deprecation for details\naclaraReadingsv2: org.apache.spark.sql.DataFrame = [headend_meter_id: string, functionallocation: string ... 14 more fields]\nres563: Long = 12822771\n"}]},"apps":[],"jobName":"paragraph_1535449774982_1267328847","id":"20180823-033248_1524532425","dateCreated":"2018-08-28T05:49:34-0400","status":"ABORT","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:7363","user":"vasudea"},{"dateUpdated":"2018-08-28T05:49:34-0400","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1535449774983_1266944098","id":"20180828-042843_1491553177","dateCreated":"2018-08-28T05:49:34-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7364"},{"title":"Load Daily Read Interval Type","text":"spark.catalog.dropTempView(\"acl_daily_readings\")\r\n\r\nval slotBeginDate=\"2017-07-01 00:00:00\"\r\n\r\nval aclaraDailyReadings = \r\nspark\r\n    .sql(\"\"\"select distinct ar.meter_id, transponder_id, transponder_port, cast(customer_id AS String) as functionallocation,              \r\n    \r\n    reading_value, unit_of_measure, ar.reading_datetime, timezone, battery_voltage, ingest_watermark    \r\n    from awexternal.aclara_readings ar \r\n    join ( select meter_id, max(reading_datetime) reading_datetime,   concat(year(reading_datetime),'-',month(reading_datetime),'-',day(reading_datetime)) meterreadingday         from awexternal.aclara_readings        where reading_datetime > ${slotBeginDate} group by meter_id, concat(year(reading_datetime),'-',month(reading_datetime),'-',day(reading_datetime))         ) last_row   \r\n    on last_row.meter_id = ar.meter_id and last_row.reading_datetime = ar.reading_datetime \"\"\").toDF()\r\n\r\n\r\n\r\n\r\naclaraDailyReadings.registerTempTable(\"acl_daily_readings\")\r\n\r\nval amwCountyList = \"('CA0520', 'CA0560')\";\r\n\r\nval secondDailyQuery = \r\nspark.sql(\"\"\"\r\nSelect distinct \r\n        acl_daily_readings.meter_id as headend_meter_id,\r\n        acl_daily_readings.functionallocation,\r\n        acl_daily_readings.reading_datetime,\r\n        acl_daily_readings.timezone,\r\n        acl_daily_readings.reading_value,\r\n        acl_daily_readings.unit_of_measure,\r\n        round(reading_value - lag(reading_value,\r\n 1) OVER (partition by  meter_id ORDER BY reading_datetime),\r\n2) consumption,\r\n        unix_timestamp(reading_datetime)- unix_timestamp(lag(reading_datetime,\r\n 1) OVER (partition by  meter_id ORDER BY reading_datetime))  read_interval,\r\n        imd.equipmentnumber,\r\n        imd.installation,\r\n        imd.register,\r\n        imd.logicalregisternumber,\r\n        cmd.businesspartnernumber,\r\n        cmd.contractaccount,\r\n        cmd.contract,\r\n        cmd.district from acl_daily_readings Inner Join awinternal.locationmasterdata lmd on acl_daily_readings.functionallocation = lmd.functionallocation  inner join awinternal.installedmeterdetails imd on imd.devicelocation = lmd.functionallocation         and current_date between imd.devicevaliditystartdate and imd.devicevalidityenddate inner join cloudseer.meter_details cmd on  cmd.equipmentnumber =imd.equipmentnumber       and current_date between cmd.devicevaliditystartdate and cmd.devicevalidityenddate       and current_date between cmd.moveindate and cmd.moveoutdate       and imd.register = cmd.register       and district in $amwCountyList order by headend_meter_id,\r\n reading_datetime ,\r\n imd.register \r\n\"\"\").toDF()\r\n\r\nsecondDailyQuery.count","dateUpdated":"2018-08-28T05:51:23-0400","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"aclaraDailyReadings: org.apache.spark.sql.DataFrame = [meter_id: string, transponder_id: string ... 8 more fields]\nwarning: there was one deprecation warning; re-run with -deprecation for details\nsecondDailyQuery: org.apache.spark.sql.DataFrame = [headend_meter_id: string, functionallocation: string ... 14 more fields]\nres572: Long = 939425\n"}]},"apps":[],"jobName":"paragraph_1535449774983_1266944098","id":"20180823-033255_1309242422","dateCreated":"2018-08-28T05:49:34-0400","status":"ABORT","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7365","user":"vasudea"},{"title":"Load MeterNextRead","text":"val mrusrMeterNextRead = \r\nspark\r\n    .sql(\"\"\"\r\n    select meterreadingunit,min(scheduledmeterreadingdate) next_read_date \r\n    from awinternal.meterreadingunitschedulerecord \r\n    where scheduledmeterreadingdate >= current_date() \r\n    group by meterreadingunit\r\n    \"\"\").toDF()\r\n\r\nmrusrMeterNextRead.registerTempTable(\"mrusr_meter_next_read\")\r\nmrusrMeterNextRead.count\r\n","dateUpdated":"2018-08-28T05:49:34-0400","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"mrusrMeterNextRead: org.apache.spark.sql.DataFrame = [meterreadingunit: string, next_read_date: date]\nwarning: there was one deprecation warning; re-run with -deprecation for details\nres575: Long = 0\n"}]},"apps":[],"jobName":"paragraph_1535449774983_1266944098","id":"20180824-055935_1025463092","dateCreated":"2018-08-28T05:49:34-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7366"},{"title":"Postgres QA Move","text":"val dbUrl = \"jdbc:postgresql://hsynlapps004.amwaternp.net:5432/ao-aw-cloudseer3\"\r\nval dbUser = \"postgres\"\r\nval dbPassword = \"System\"\r\nval dbDriver = \"org.postgresql.Driver\"\r\nval dbProperties = new java.util.Properties\r\n\r\n\r\ndbProperties.setProperty(\"user\", dbUser)\r\ndbProperties.setProperty(\"password\", dbPassword)\r\ndbProperties.setProperty(\"driver\", dbDriver)\r\n\r\nval dbWriteMode = \"overwrite\"\r\n\r\n//\r\n// app.meter_ami_reads_hourly\r\n//\r\nval aclHourlyWriter = aclaraReadingsv2.write.mode(dbWriteMode)\r\naclHourlyWriter.jdbc(url=dbUrl, table=\"app.meter_ami_reads_hourly\", dbProperties)\r\n\r\n\r\n//\r\n// app.meter_ami_reads_daily\r\n//\r\nval aclDailyWriter = secondDailyQuery.write.mode(dbWriteMode)\r\naclDailyWriter.jdbc(url=dbUrl, table=\"app.meter_ami_reads_daily\", dbProperties)\r\n\r\n\r\n//\r\n// app.meter_next_read\r\n//\r\nif(mrusrMeterNextRead.count > 0){\r\n    val aclMeterNextReadWriter = mrusrMeterNextRead.write.mode(dbWriteMode)\r\n    aclMeterNextReadWriter.jdbc(url=dbUrl, table=\"app.meter_next_read\", dbProperties)\r\n}\r\n\r\n","dateUpdated":"2018-08-28T05:49:34-0400","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"dbUrl: String = jdbc:postgresql://hsynlapps004.amwaternp.net:5432/ao-aw-cloudseer3\ndbUser: String = postgres\ndbPassword: String = System\ndbDriver: String = org.postgresql.Driver\ndbProperties: java.util.Properties = {}\nres578: Object = null\nres579: Object = null\nres580: Object = null\ndbWriteMode: String = overwrite\naclHourlyWriter: org.apache.spark.sql.DataFrameWriter[org.apache.spark.sql.Row] = org.apache.spark.sql.DataFrameWriter@5c5ce73e\naclDailyWriter: org.apache.spark.sql.DataFrameWriter[org.apache.spark.sql.Row] = org.apache.spark.sql.DataFrameWriter@5334e7ae\n"}]},"apps":[],"jobName":"paragraph_1535449774984_1265020354","id":"20180824-055754_1532963770","dateCreated":"2018-08-28T05:49:34-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7367"},{"dateUpdated":"2018-08-28T05:49:34-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1535449774984_1265020354","id":"20180824-075729_416299482","dateCreated":"2018-08-28T05:49:34-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:7368"}],"name":"com.apporchid.ami.aclara_readings","id":"2DQ5SC678","angularObjects":{"2CHS8UYQQ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}